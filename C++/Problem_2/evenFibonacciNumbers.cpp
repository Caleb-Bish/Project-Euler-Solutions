/* Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with terms 1 and 2, the first 10 terms will be:
 * 1,2,3,5,8,13,21,34,55,80,...
 * By considering the terms in the Fibonacci sequence whose values do not exceed 4 million,
 * find the sum of the even-valued terms.
 *
 * STATUS: SOLVED.
 */
#include <iostream>




int main() {
    // Requires: 4 integers.
    // 3 ints to store the current and previous sequence values, and a temp variable for swapping.
    // Final int to store the sum of even-valued terms.
    // There is no maths other than summation, and a seqeuence value will never be negative, hence will use unsigned integers.
    // This question does actually want us to start from the beginning of the Fibonacci sequence.
    unsigned int currentVal {1}, previousVal {0}, tempVal {}, runningTotal {};
    int evenCounter {};

    // Loop until the sequence is greater than or equal to 4 million.
    while (currentVal < 4000000) {
        // Calculate next value in sequence.
        tempVal = currentVal;
        currentVal += previousVal;
        previousVal = tempVal;

        // Check if the sequence term is even, if so add to the running sum total.
        if (currentVal % 2 == 0) {
            runningTotal += currentVal;
            evenCounter+=1;
        }
    }

    std::cout << "The sum of the even-valued Fibonacci sequence terms is: " << runningTotal << '\n'
        << "FYI, the count of even-valued numbers found was: " << evenCounter << '\n';

    return 0;
}
